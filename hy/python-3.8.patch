From 563f27632c95d709f6685e469b7c1e97be1c38e7 Mon Sep 17 00:00:00 2001
From: Kodi Arfer <git@arfer.net>
Date: Tue, 4 Jun 2019 16:03:52 -0400
Subject: [PATCH 1/2] Fix crashes on the new Python 3.8 alpha

---
 hy/_compat.py  | 4 +++-
 hy/compiler.py | 3 ++-
 2 files changed, 5 insertions(+), 2 deletions(-)

diff --git a/hy/_compat.py b/hy/_compat.py
index a2ab7a5..da31477 100644
--- a/hy/_compat.py
+++ b/hy/_compat.py
@@ -37,10 +37,12 @@ if PY3:
         finally:
             traceback = None
 
-    code_obj_args = ['argcount', 'kwonlyargcount', 'nlocals', 'stacksize',
+    code_obj_args = ['argcount', 'posonlyargcount', 'kwonlyargcount', 'nlocals', 'stacksize',
                      'flags', 'code', 'consts', 'names', 'varnames',
                      'filename', 'name', 'firstlineno', 'lnotab', 'freevars',
                      'cellvars']
+    if not PY38:
+        code_obj_args.remove("posonlyargcount")
 else:
     def raise_from(value, from_value=None):
         raise value
diff --git a/hy/compiler.py b/hy/compiler.py
index 9a20daf..ddb75da 100755
--- a/hy/compiler.py
+++ b/hy/compiler.py
@@ -1145,7 +1145,7 @@ class HyASTCompiler(object):
                 expr,
                 name=fname,
                 args=ast.arguments(
-                    args=[], vararg=None, kwarg=None,
+                    args=[], vararg=None, kwarg=None, posonlyargs=[],
                     kwonlyargs=[], kw_defaults=[], defaults=[]),
                 body=f(parts).stmts,
                 decorator_list=[])
@@ -1524,6 +1524,7 @@ class HyASTCompiler(object):
         args = ast.arguments(
             args=main_args, defaults=defaults,
             vararg=rest,
+            posonlyargs=[],
             kwonlyargs=kwonly, kw_defaults=kw_defaults,
             kwarg=kwargs)
 

From 9af02dd0a4e8ffe8234e42cf834fbdcf1e12b301 Mon Sep 17 00:00:00 2001
From: Kodi Arfer <git@arfer.net>
Date: Mon, 10 Jun 2019 16:12:46 -0400
Subject: [PATCH 2/2] Fix a test for Python 3.8.0b1

`int`, among other types, no longer has a `__str__` method, so `(str '3)` now returns "(HyInteger 3)" instead of "3".
---
 tests/native_tests/native_macros.hy | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/tests/native_tests/native_macros.hy b/tests/native_tests/native_macros.hy
index 835939e..e320143 100644
--- a/tests/native_tests/native_macros.hy
+++ b/tests/native_tests/native_macros.hy
@@ -391,7 +391,7 @@ in expansions."
   ;; Now, let's use a `require`d macro that depends on another macro defined only
   ;; in this scope.
   (defmacro local-test-macro [x]
-    (.format "This is the local version of `nonlocal-test-macro` returning {}!" x))
+    (.format "This is the local version of `nonlocal-test-macro` returning {}!" (int x)))
 
   (assert (= "This is the local version of `nonlocal-test-macro` returning 3!"
              (test-module-macro-2 3)))
